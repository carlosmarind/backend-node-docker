apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
stringData:
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: secret
  POSTGRES_DB: app_db
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-node
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-node
  template:
    metadata:
      labels:
        app: backend-node
    spec:
      containers:
      - name: backend-node
        image: ghcr.io/carlosmarind/backend-node-docker:latest
        imagePullPolicy: Always
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_PORT
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "1000m"
            memory: "500Mi"
      imagePullSecrets:
      - name: github-registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: backend-node-service
spec:
  selector:
    app: backend-node
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: hostpath
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-node-ingress
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - backend.devops.cl
  rules:
  - host: backend.devops.cl
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-node-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-node-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-node
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 15 # Espera 15s para estabilizar antes de subir
      selectPolicy: Max
      policies:
      - type: Pods
        value: 2 # Máximo 2 pods nuevos por periodo
        periodSeconds: 15
      - type: Percent
        value: 50 # O hasta 50% de los pods actuales
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 30 # Espera 30s antes de bajar pods
      selectPolicy: Max
      policies:
      - type: Pods
        value: 2 # Máximo 2 pods menos por periodo
        periodSeconds: 15
      - type: Percent
        value: 25 # O hasta 25% de los pods actuales
        periodSeconds: 15
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-account
  namespace: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-admin
rules:
- apiGroups: [ "", "apps", "extensions", "batch", "networking.k8s.io" ] # kubectl api-resources -o=wide
  resources: [ "*" ]
  verbs: [ "*" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-admin-binding
subjects:
- kind: ServiceAccount
  name: jenkins-account
  namespace: jenkins
roleRef:
  kind: ClusterRole
  name: jenkins-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-account
  namespace: curso-contenedores
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: contenedores-admin
  namespace: curso-contenedores
rules:
- apiGroups: [ "", "apps", "extensions", "batch", "networking.k8s.io" ] # kubectl api-resources -o=wide
  resources: [ "*" ]
  verbs: [ "*" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: contenedores-admin-binding
subjects:
- kind: ServiceAccount
  name: admin-account
  namespace: curso-contenedores
roleRef:
  kind: Role
  name: contenedores-admin
  apiGroup: rbac.authorization.k8s.io
